<div class="w-full bg-gray-900" id="tlc-container" phx-hook="DragHandler">
  <div class="container mx-auto">
    <%
      display_program = cond do
        @editing -> @edited_program
        @saved_program != nil -> @saved_program
        true -> @tlc.logic.program
      end
    %>

    <!-- Container with consistent gap spacing -->
    <div class="flex flex-col gap-2 p-2">
      <!-- Signal Heads and State sections side by side -->
      <div class="flex flex-wrap gap-2">
        <!-- Current State section -->
        <div class="flex-1">
          <.state_section logic={@tlc.logic} />
        </div>

        <!-- Signal Head Visualization -->
        <div class="">
          <.signal_heads_section 
            groups={@tlc.logic.program.groups} 
            current_state={@tlc.logic.current_states} 
          />
        </div>
      </div>

      <!-- Cycle table section -->
      <div class="overflow-x-auto">
        <div id="switch-drag-container"
             class={"bg-gray-800 p-4 rounded shadow-lg border border-gray-700 #{if @switch_dragging, do: "switch-dragging-active", else: ""}"}>
          <div class="mb-4">
            <h2 class="text-xl font-semibold text-gray-200 mb-3">Program</h2>

            <!-- Program selector and edit mode controls -->
            <.program_controls
              editing={@editing}
              programs={@tlc.programs}
              logic_mode={@tlc.logic.mode}
              current_program={@tlc.logic.program}
              target_program={@target_program}
              edited_program={@edited_program}
            />

            <!-- interval controls (only when not editing) -->
            <%= if not @editing do %>
              <.interval_controls interval={@tlc.interval} />
            <% end %>
          </div>

          <!-- Column-based layout -->
          <div class="flex border-t border-l border-gray-600">
            <!-- Labels column -->
            <.program_labels_column program={display_program} />

            <!-- Data columns -->
            <%= for {cycle, col_idx} <- Enum.with_index(0..display_program.length - 1) do %>
              <.program_cell
                cycle={cycle}
                col_idx={col_idx}
                program_length={display_program.length}
                current_cycle={@tlc.logic.cycle_time}
                editing={@editing}
              >
                <%
                  current_program = if @editing, do: @edited_program, else: @tlc.logic.program
                  is_active_offset = if @editing, do: current_program.offset == cycle, else: @tlc.logic.offset == cycle
                  is_target_offset = if @editing, do: false, else: @tlc.logic.target_offset == cycle
                  is_between = is_between_offsets(cycle, @tlc.logic, @editing)
                %>
                <.offset_cell
                  cycle={cycle}
                  editing={@editing}
                  is_active_offset={is_active_offset}
                  is_target_offset={is_target_offset}
                  is_between={is_between}
                  target_distance={@tlc.logic.target_distance}
                />

                <!-- Skip cell -->
                <%
                  skip_duration = if @editing do
                    Map.get(@edited_program.skips || %{}, cycle, 0)
                  else
                    Map.get(display_program.skips || %{}, cycle, 0)
                  end
                  has_skip = skip_duration > 0
                  is_start_of_skip = has_skip
                  
                  is_end_of_skip = if @editing do
                    Enum.any?(@edited_program.skips || %{}, fn {start, duration} ->
                      cycle == Tlc.Logic.mod(start + duration, @edited_program.length)
                    end)
                  else
                    Enum.any?(@tlc.logic.program.skips || %{}, fn {start, duration} ->
                      cycle == Tlc.Logic.mod(start + duration, @tlc.logic.program.length)
                    end)
                  end
                  
                  skip_start_point = if is_end_of_skip && @editing do
                    Enum.find_value(@edited_program.skips || %{}, fn {start, duration} ->
                      if cycle == Tlc.Logic.mod(start + duration, @edited_program.length), do: start, else: nil
                    end)
                  else
                    nil
                  end
                  
                  current_cell_has_invalid_skip = if @editing && is_end_of_skip && skip_start_point do
                    start_state = Tlc.Program.resolve_state(@edited_program, Tlc.Logic.mod(skip_start_point - 1, @edited_program.length))
                    end_state = Tlc.Program.resolve_state(@edited_program, cycle)
                    
                    skip_transitions = Enum.reduce(Enum.with_index(@edited_program.groups), [], fn {group_name, i}, acc ->
                      start_signal = String.at(start_state, i)
                      end_signal = String.at(end_state, i)
                      
                      is_invalid = case {start_signal, end_signal} do
                        {"G", "R"} -> true
                        {"R", "G"} -> true
                        _ -> false
                      end
                      
                      if is_invalid do
                        error_msg = "Invalid transition from #{start_signal} to #{end_signal}"
                        [{group_name, i, error_msg} | acc]
                      else
                        acc
                      end
                    end)
                    
                    length(skip_transitions) > 0 && skip_transitions
                  else
                    false
                  end
                  
                  skip_error_tooltip = if current_cell_has_invalid_skip do
                    "Invalid Skip Transition:\n" <> (
                      Enum.map(current_cell_has_invalid_skip, fn {group_name, _i, error_msg} -> 
                        "â€¢ Group '#{group_name}': #{error_msg}"
                      end)
                      |> Enum.join("\n")
                    )
                  else
                    nil
                  end
                  
                  is_within_skip = if @editing do
                    Enum.any?(@edited_program.skips || %{}, fn {start, duration} ->
                      end_cycle = Tlc.Logic.mod(start + duration, @edited_program.length)
                      if start < end_cycle do
                        cycle > start && cycle < end_cycle
                      else
                        cycle > start || cycle < end_cycle
                      end
                    end)
                  else
                    Enum.any?(@tlc.logic.program.skips || %{}, fn {start, duration} ->
                      end_cycle = Tlc.Logic.mod(start + duration, @tlc.logic.program.length)
                      if start < end_cycle do
                        cycle > start && cycle < end_cycle
                      else
                        cycle > start || cycle < end_cycle
                      end
                    end)
                  end
                %>
                <div class={"p-1 h-8 flex items-center justify-center border-r border-b border-gray-600 #{if is_start_of_skip || is_within_skip, do: "bg-gray-400", else: ""} relative"}
                     title={skip_error_tooltip}
                     data-tooltip-content={skip_error_tooltip}>
                  <%= if is_start_of_skip do %>
                    <%= skip_duration %>
                  <% else %>
                    <%= if current_cell_has_invalid_skip do %>
                      <div class="invalid-transition-indicator cursor-pointer" title={skip_error_tooltip} data-tooltip-content={skip_error_tooltip}>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-full w-full" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    <% else %>
                      <span class="opacity-0">0</span>
                    <% end %>
                  <% end %>
                </div>

                <!-- Wait cell -->
                <%
                  wait_duration = if @editing do
                    Map.get(@edited_program.waits || %{}, cycle, 0)
                  else
                    Map.get(display_program.waits || %{}, cycle, 0)
                  end
                  has_wait = wait_duration > 0
                %>
                <div class={"p-1 h-8 flex items-center justify-center border-r border-b border-gray-600 #{if has_wait, do: "bg-gray-400", else: ""}"}>
                  <%= if has_wait do %>
                    <%= wait_duration %>
                  <% else %>
                    <span class="opacity-0">0</span>
                  <% end %>
                </div>

                <!-- Switch cell -->
                <%
                  program = if @editing, do: @edited_program, else: display_program
                  is_switch_point = cycle == program.switch
                %>
                <.switch_cell
                  cycle={cycle}
                  is_switch_point={is_switch_point}
                  editing={@editing}
                />

                <!-- Halt cell -->
                <%
                  is_halt_point = cycle == Map.get(program, :halt)
                %>
                <div class={"p-1 h-8 flex items-center justify-center border-r border-b border-gray-600 #{if is_halt_point, do: "bg-gray-400", else: ""} #{if @editing, do: "cursor-pointer"}"}
                     phx-click={if @editing, do: "toggle_halt"}
                     phx-value-cycle={cycle}>
                  <span class="opacity-0">0</span>
                </div>

                <!-- Group signal cells -->
                <%= for {_group, i} <- Enum.with_index(display_program.groups) do %>
                  <%
                    state = if @editing do
                      Tlc.Program.resolve_state(@edited_program, cycle)
                    else
                      Tlc.Program.resolve_state(display_program, cycle)
                    end
                    signal = String.at(state, i)
                    
                    bg_class = case signal do
                      "R" -> "bg-red-600" # Same as used in lamp_class(true, :red)
                      "Y" -> "bg-yellow-500" # Same as used in lamp_class(true, :yellow)
                      "A" -> "bg-orange-500" # Same as used in lamp_class(true, :yellow)
                      "G" -> "bg-green-600"  # Same as used in lamp_class(true, :green)
                      "D" -> "bg-gray-800"
                      _ -> "bg-gray-800"
                    end
                    
                    has_invalid_transition = @editing && Map.has_key?(@invalid_transitions, {cycle, i})
                    error_tooltip = if has_invalid_transition, do: Map.get(@invalid_transitions, {cycle, i}), else: nil
                  %>
                  <div 
                    class={"p-1 h-8 flex relative items-center justify-center border-r #{if i == length(display_program.groups) - 1, do: "", else: "border-b"} border-gray-600 #{bg_class} #{if @editing, do: "cursor-pointer"} #{if has_invalid_transition, do: "signal-cell-invalid"}"}
                    phx-click={if @editing, do: "update_cell_signal"}
                    phx-value-cycle={cycle}
                    phx-value-group={i}
                    phx-value-signal={if @editing, do: next_signal(signal), else: signal}
                    data-cycle={cycle}
                    data-group={i}
                    data-signal={signal}
                    title={if has_invalid_transition, do: error_tooltip, else: signal}
                  >
                    <%= if has_invalid_transition do %>
                      <div class="invalid-transition-indicator" title={error_tooltip}>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-full w-full" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    <% end %>
                    <span><%= signal %></span>
                  </div>
                <% end %>
              </.program_cell>
            <% end %>
          </div>

          <!-- Program definition section (only when editing) -->
          <%= if @editing do %>
            <div class="mt-4 border-t border-gray-600 pt-4">
              <h3 class="text-lg font-semibold text-gray-200 mb-2 flex items-center">
                Program Definition
              </h3>
              <pre class="bg-gray-900 p-3 rounded shadow-lg border border-gray-700 text-gray-300 text-sm font-mono overflow-x-auto">
<%= inspect(@edited_program, pretty: true, limit: :infinity) %>
              </pre>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Program Modal -->
  <.program_modal
    show={@show_program_modal}
    formatted_program={@formatted_program}
    on_close={JS.push("hide_program_modal")}
  />
</div>
