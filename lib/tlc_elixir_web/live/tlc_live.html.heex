<div class="w-full bg-gray-900" id="tlc-container" phx-hook="DragHandler">
  <div class="container mx-auto">
    <%
      display_program = cond do
        @editing -> @edited_program
        @saved_program != nil -> @saved_program
        true -> @tlc.logic.program
      end
    %>

    <!-- Container with consistent gap spacing -->
    <div class="flex flex-col gap-2 p-2">
      <!-- Signal Heads and State sections side by side -->
      <div class="flex flex-wrap gap-2">
        <!-- Current State section -->
        <div class="flex-1">
          <div class="bg-gray-800 p-3 rounded shadow-lg border border-gray-700 h-full">
            <h2 class="text-lg font-semibold text-gray-200 mb-2">Logic</h2>
            <div class="grid grid-cols-4 gap-2 text-xs">
              <!-- First row state cards -->
              <.state_card label="Mode" value={@tlc.logic.mode} />
              <.state_card label="Unix Time" value={@tlc.logic.unix_time} />
              <.state_card label="Unix Delta" value={@tlc.logic.unix_delta} />
              <.state_card label="Base Time" value={@tlc.logic.base_time} />

              <!-- Second row state cards -->
              <.state_card label="Cycle Time" value={@tlc.logic.cycle_time} />
              <.state_card label="Program" value={@tlc.logic.program.name} />
              <.state_card label="Program Offset" value={@tlc.logic.program.offset} />
              <.state_card label="Offset Adjust" value={@tlc.logic.offset_adjust} />

              <!-- Third row state cards -->
              <.state_card label="Current Offset" value={@tlc.logic.offset} />
              <.state_card label="Target Offset" value={@tlc.logic.target_offset} />
              <.state_card label="Target Distance" value={@tlc.logic.target_distance} />
              <.state_card label="Waited" value={@tlc.logic.waited} />
            </div>
          </div>
        </div>

        <!-- Signal Head Visualization -->
        <div class="">
          <div class="bg-gray-800 p-3 rounded shadow-lg border border-gray-700 h-full">
            <h2 class="text-lg font-semibold text-gray-200 mb-2">Groups</h2>
            <div class="flex justify-center gap-8" id="signal-heads-container">
              <%
                current_state = @tlc.logic.current_states
                groups = @tlc.logic.program.groups
              %>
              <%= for {group, i} <- Enum.with_index(groups) do %>
                <div class="flex flex-col items-center" id={"signal-head-#{i}"}>
                  <div class="signal-head flex flex-col gap-2 p-2 bg-gray-900 rounded border border-gray-700">
                    <%
                      signal = String.at(current_state, i)
                      states = lamp_states(signal)
                    %>
                    <div class={"w-10 h-10 rounded-full #{lamp_class(states.red, :red)} shadow-lg"} title="Red"></div>
                    <div class={"w-10 h-10 rounded-full #{lamp_class(states.yellow, :yellow)} shadow-lg"} title="Yellow"></div>
                    <div class={"w-10 h-10 rounded-full #{lamp_class(states.green, :green)} shadow-lg"} title="Green"></div>
                  </div>
                  <span class="text-gray-300 text-sm font-medium mt-2"><%= group %></span>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>

      <!-- Cycle table section -->
      <div class="overflow-x-auto">
        <div id="switch-drag-container"
             class={"bg-gray-800 p-4 rounded shadow-lg border border-gray-700 #{if @switch_dragging, do: "switch-dragging-active", else: ""}"}>
          <div class="mb-4">
            <h2 class="text-xl font-semibold text-gray-200 mb-3">Program</h2>

            <!-- Program selector and edit mode controls -->
            <div class="flex justify-between mb-3">
              <!-- Program selector section -->
              <div class="flex flex-wrap gap-3">
                <%= if not @editing do %>
                  <%= for program <- @tlc.programs do %>
                    <%
                      clickable = cond do
                        @tlc.logic.mode == :fault -> false
                        program.name == "fault" -> false
                        true -> true
                      end
                      
                      button_class = cond do
                        @tlc.logic.mode == :fault && program.name != "fault" -> "bg-gray-700 text-gray-500 cursor-not-allowed opacity-50"
                        program.name == "fault" && @tlc.logic.mode != :fault -> "bg-gray-700 text-gray-500 cursor-not-allowed opacity-50"
                        program.name == @tlc.logic.program.name -> "bg-purple-600 text-white"
                        program.name == @target_program -> "bg-gray-700 text-white"
                        true -> "bg-gray-700 hover:bg-gray-600 text-white"
                      end
                    %>
                    <button 
                      phx-click={if clickable, do: "switch_program", else: nil}
                      phx-value-program_name={program.name}
                      class={"px-3 py-1 rounded flex items-center #{button_class} group relative"}
                    >
                      <div class="w-5 flex justify-center mr-1">
                        <%= if program.name == @target_program do %>
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                          </svg>
                        <% end %>
                      </div>
                      
                      <span><%= program.name %></span>
                      
                      <%= if (@tlc.logic.mode != :fault || program.name != "fault") && program.name != @tlc.logic.program.name do %>
                        <svg 
                          phx-click="start_editing"
                          phx-value-program_name={program.name}
                          class="h-3.5 w-3.5 ml-1 text-white opacity-0 group-hover:opacity-100 cursor-pointer"
                          xmlns="http://www.w3.org/2000/svg" 
                          fill="none" 
                          viewBox="0 0 24 24" 
                          stroke="currentColor"
                        >
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                        </svg>
                      <% end %>
                    </button>
                  <% end %>
                <% else %>
                  <!-- Program editing form -->
                  <form phx-change="update_program_form" phx-submit="prevent_submit" class="flex items-center gap-3">
                    <div class="flex items-center">
                      <label class="text-gray-400 mr-2">Name:</label>
                      <input type="text" name="program_name" value={@edited_program.name}
                             phx-blur="update_program_name"
                             class="bg-gray-700 text-white px-2 py-1 rounded border border-gray-600 w-32" />
                    </div>
                    <div class="flex items-center">
                      <label class="text-gray-400 mr-2">Length:</label>
                      <input type="number" id="program-length-input" name="program_length"
                             value={@edited_program.length}
                             min="1"
                             max="100"
                             class="bg-gray-700 text-white px-2 py-1 rounded border border-gray-600 w-16" />
                    </div>
                    <div class="flex items-center">
                      <label class="text-gray-400 mr-2">Offset:</label>
                      <input type="number" id="program-offset-input" name="program_offset"
                             value={@edited_program.offset || 0}
                             min="0"
                             max={@edited_program.length - 1}
                             class="bg-gray-700 text-white px-2 py-1 rounded border border-gray-600 w-16" />
                    </div>
                  </form>
                <% end %>
              </div>

              <!-- Edit controls and fault button -->
              <div class="flex gap-2">
                <%= if @editing do %>
                  <button phx-click="cancel_editing" class="bg-gray-700 hover:bg-gray-600 text-white px-3 py-1 rounded">
                    Cancel
                  </button>
                  <button phx-click="save_program" 
                          class="bg-purple-700 hover:bg-purple-600 text-white px-3 py-1 rounded">
                    Save
                  </button>
                <% else %>
                  <!-- Fault toggle button -->
                  <button phx-click="toggle_fault" 
                          class={"bg-gray-700 #{if @tlc.logic.mode == :fault, do: "hover:bg-red-700 bg-red-600", else: "hover:bg-gray-600"} text-white px-3 py-1 rounded flex items-center gap-1"}>
                    <span>Fault</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </button>
                <% end %>
              </div>
            </div>

            <!-- interval controls (only when not editing) -->
            <%= if not @editing do %>
              <div class="flex space-x-2 mb-3">
                <span class="text-gray-300 self-center mr-1">interval (ms):</span>
                <button phx-click="set_interval" phx-value-interval="1000" class={"bg-gray-700 hover:bg-purple-700 text-white px-3 py-1 rounded #{if @tlc.interval == 1000, do: "bg-purple-700"}"}>
                  1000
                </button>
                <button phx-click="set_interval" phx-value-interval="300" class={"bg-gray-700 hover:bg-purple-700 text-white px-3 py-1 rounded #{if @tlc.interval == 300, do: "bg-purple-700"}"}>
                  300
                </button>
                <button phx-click="set_interval" phx-value-interval="100" class={"bg-gray-700 hover:bg-purple-700 text-white px-3 py-1 rounded #{if @tlc.interval == 100, do: "bg-purple-700"}"}>
                  100
                </button>
                <button phx-click="set_interval" phx-value-interval="30" class={"bg-gray-700 hover:bg-purple-700 text-white px-3 py-1 rounded #{if @tlc.interval == 30, do: "bg-purple-700"}"}>
                  30
                </button>
                <button phx-click="set_interval" phx-value-interval="10" class={"bg-gray-700 hover:bg-purple-700 text-white px-3 py-1 rounded #{if @tlc.interval == 10, do: "bg-purple-700"}"}>
                  10
                </button>
                <button phx-click="set_interval" phx-value-interval="3" class={"bg-gray-700 hover:bg-purple-700 text-white px-3 py-1 rounded #{if @tlc.interval == 3, do: "bg-purple-700"}"}>
                  3
                </button>
              </div>
            <% end %>
          </div>

          <!-- Column-based layout -->
          <div class="flex border-t border-l border-gray-600">
            <!-- Labels column -->
            <div class="w-24 flex flex-col">
              <div class="p-1 h-8 flex items-center justify-left font-semibold bg-gray-700 text-gray-200 border-r border-b border-gray-600">Cycle</div>
              <div class="p-1 h-8 flex items-center text-left bg-gray-700 text-gray-200 font-medium border-r border-b border-gray-600">Offset</div>
              <div class="p-1 h-8 flex items-center text-left bg-gray-700 text-gray-200 font-medium border-r border-b border-gray-600">Skips</div>
              <div class="p-1 h-8 flex items-center text-left bg-gray-700 text-gray-200 font-medium border-r border-b border-gray-600">Waits</div>
              <div class="p-1 h-8 flex items-center text-left bg-gray-700 text-gray-200 font-medium border-r border-b border-gray-600">Switch</div>
              <div class="p-1 h-8 flex items-center text-left bg-gray-700 text-gray-200 font-medium border-r border-b border-gray-600">Halt</div>
              <%= for {_group, i} <- Enum.with_index(display_program.groups) do %>
                <div class={"p-1 h-8 flex items-center text-left bg-gray-700 text-gray-200 font-medium border-r #{if i == length(display_program.groups) - 1, do: "", else: "border-b"} border-gray-600"}>
                  <%= Enum.at(display_program.groups, i) %>
                </div>
              <% end %>
            </div>

            <!-- Data columns -->
            <%= for {cycle, col_idx} <- Enum.with_index(0..display_program.length - 1) do %>
              <.program_cell
                cycle={cycle}
                col_idx={col_idx}
                program_length={display_program.length}
                current_cycle={@tlc.logic.cycle_time}
                editing={@editing}
              >
                <%
                  current_program = if @editing, do: @edited_program, else: @tlc.logic.program
                  is_active_offset = if @editing, do: current_program.offset == cycle, else: @tlc.logic.offset == cycle
                  is_target_offset = if @editing, do: false, else: @tlc.logic.target_offset == cycle
                  is_between = is_between_offsets(cycle, @tlc.logic, @editing)
                %>
                <.offset_cell
                  cycle={cycle}
                  editing={@editing}
                  is_active_offset={is_active_offset}
                  is_target_offset={is_target_offset}
                  is_between={is_between}
                  target_distance={@tlc.logic.target_distance}
                />

                <!-- Skip cell -->
                <%
                  skip_duration = if @editing do
                    Map.get(@edited_program.skips || %{}, cycle, 0)
                  else
                    Map.get(display_program.skips || %{}, cycle, 0)
                  end
                  has_skip = skip_duration > 0
                  is_start_of_skip = has_skip
                  
                  is_end_of_skip = if @editing do
                    Enum.any?(@edited_program.skips || %{}, fn {start, duration} ->
                      cycle == Tlc.Logic.mod(start + duration, @edited_program.length)
                    end)
                  else
                    Enum.any?(@tlc.logic.program.skips || %{}, fn {start, duration} ->
                      cycle == Tlc.Logic.mod(start + duration, @tlc.logic.program.length)
                    end)
                  end
                  
                  skip_start_point = if is_end_of_skip && @editing do
                    Enum.find_value(@edited_program.skips || %{}, fn {start, duration} ->
                      if cycle == Tlc.Logic.mod(start + duration, @edited_program.length), do: start, else: nil
                    end)
                  else
                    nil
                  end
                  
                  current_cell_has_invalid_skip = if @editing && is_end_of_skip && skip_start_point do
                    start_state = Tlc.Program.resolve_state(@edited_program, Tlc.Logic.mod(skip_start_point - 1, @edited_program.length))
                    end_state = Tlc.Program.resolve_state(@edited_program, cycle)
                    
                    skip_transitions = Enum.reduce(Enum.with_index(@edited_program.groups), [], fn {group_name, i}, acc ->
                      start_signal = String.at(start_state, i)
                      end_signal = String.at(end_state, i)
                      
                      is_invalid = case {start_signal, end_signal} do
                        {"G", "R"} -> true
                        {"R", "G"} -> true
                        _ -> false
                      end
                      
                      if is_invalid do
                        error_msg = "Invalid transition from #{start_signal} to #{end_signal}"
                        [{group_name, i, error_msg} | acc]
                      else
                        acc
                      end
                    end)
                    
                    length(skip_transitions) > 0 && skip_transitions
                  else
                    false
                  end
                  
                  skip_error_tooltip = if current_cell_has_invalid_skip do
                    "Invalid Skip Transition:\n" <> (
                      Enum.map(current_cell_has_invalid_skip, fn {group_name, _i, error_msg} -> 
                        "• Group '#{group_name}': #{error_msg}"
                      end)
                      |> Enum.join("\n")
                    )
                  else
                    nil
                  end
                  
                  is_within_skip = if @editing do
                    Enum.any?(@edited_program.skips || %{}, fn {start, duration} ->
                      end_cycle = Tlc.Logic.mod(start + duration, @edited_program.length)
                      if start < end_cycle do
                        cycle > start && cycle < end_cycle
                      else
                        cycle > start || cycle < end_cycle
                      end
                    end)
                  else
                    Enum.any?(@tlc.logic.program.skips || %{}, fn {start, duration} ->
                      end_cycle = Tlc.Logic.mod(start + duration, @tlc.logic.program.length)
                      if start < end_cycle do
                        cycle > start && cycle < end_cycle
                      else
                        cycle > start || cycle < end_cycle
                      end
                    end)
                  end
                %>
                <div class={"p-1 h-8 flex items-center justify-center border-r border-b border-gray-600 #{if is_start_of_skip || is_within_skip, do: "bg-gray-400", else: ""} relative"}
                     title={skip_error_tooltip}
                     data-tooltip-content={skip_error_tooltip}>
                  <%= if is_start_of_skip do %>
                    <%= skip_duration %>
                  <% else %>
                    <%= if current_cell_has_invalid_skip do %>
                      <div class="invalid-transition-indicator cursor-pointer" title={skip_error_tooltip} data-tooltip-content={skip_error_tooltip}>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-full w-full" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    <% else %>
                      <span class="opacity-0">0</span>
                    <% end %>
                  <% end %>
                </div>

                <!-- Wait cell -->
                <%
                  wait_duration = if @editing do
                    Map.get(@edited_program.waits || %{}, cycle, 0)
                  else
                    Map.get(display_program.waits || %{}, cycle, 0)
                  end
                  has_wait = wait_duration > 0
                %>
                <div class={"p-1 h-8 flex items-center justify-center border-r border-b border-gray-600 #{if has_wait, do: "bg-gray-400", else: ""}"}>
                  <%= if has_wait do %>
                    <%= wait_duration %>
                  <% else %>
                    <span class="opacity-0">0</span>
                  <% end %>
                </div>

                <!-- Switch cell -->
                <%
                  program = if @editing, do: @edited_program, else: display_program
                  is_switch_point = cycle == program.switch
                %>
                <.switch_cell
                  cycle={cycle}
                  is_switch_point={is_switch_point}
                  editing={@editing}
                />

                <!-- Halt cell -->
                <%
                  is_halt_point = cycle == Map.get(program, :halt)
                %>
                <div class={"p-1 h-8 flex items-center justify-center border-r border-b border-gray-600 #{if is_halt_point, do: "bg-gray-400", else: ""} #{if @editing, do: "cursor-pointer"}"}
                     phx-click={if @editing, do: "toggle_halt"}
                     phx-value-cycle={cycle}>
                  <span class="opacity-0">0</span>
                </div>

                <!-- Group signal cells -->
                <%= for {_group, i} <- Enum.with_index(display_program.groups) do %>
                  <%
                    state = if @editing do
                      Tlc.Program.resolve_state(@edited_program, cycle)
                    else
                      Tlc.Program.resolve_state(display_program, cycle)
                    end
                    signal = String.at(state, i)
                    
                    bg_class = case signal do
                      "R" -> "bg-red-600" # Same as used in lamp_class(true, :red)
                      "Y" -> "bg-yellow-500" # Same as used in lamp_class(true, :yellow)
                      "A" -> "bg-orange-500" # Same as used in lamp_class(true, :yellow)
                      "G" -> "bg-green-600"  # Same as used in lamp_class(true, :green)
                      "D" -> "bg-gray-800"
                      _ -> "bg-gray-800"
                    end
                    
                    has_invalid_transition = @editing && Map.has_key?(@invalid_transitions, {cycle, i})
                    error_tooltip = if has_invalid_transition, do: Map.get(@invalid_transitions, {cycle, i}), else: nil
                  %>
                  <div 
                    class={"p-1 h-8 flex relative items-center justify-center border-r #{if i == length(display_program.groups) - 1, do: "", else: "border-b"} border-gray-600 #{bg_class} #{if @editing, do: "cursor-pointer"} #{if has_invalid_transition, do: "signal-cell-invalid"}"}
                    phx-click={if @editing, do: "update_cell_signal"}
                    phx-value-cycle={cycle}
                    phx-value-group={i}
                    phx-value-signal={if @editing, do: next_signal(signal), else: signal}
                    data-cycle={cycle}
                    data-group={i}
                    data-signal={signal}
                    title={if has_invalid_transition, do: error_tooltip, else: signal}
                  >
                    <%= if has_invalid_transition do %>
                      <div class="invalid-transition-indicator" title={error_tooltip}>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-full w-full" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    <% end %>
                    <span><%= signal %></span>
                  </div>
                <% end %>
              </.program_cell>
            <% end %>
          </div>

          <!-- Program definition section (only when editing) -->
          <%= if @editing do %>
            <div class="mt-4 border-t border-gray-600 pt-4">
              <h3 class="text-lg font-semibold text-gray-200 mb-2 flex items-center">
                Program Definition
              </h3>
              <pre class="bg-gray-900 p-3 rounded shadow-lg border border-gray-700 text-gray-300 text-sm font-mono overflow-x-auto">
<%= inspect(@edited_program, pretty: true, limit: :infinity) %>
              </pre>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Program Modal -->
  <.program_modal
    show={@show_program_modal}
    formatted_program={@formatted_program}
    on_close={JS.push("hide_program_modal")}
  />
</div>
