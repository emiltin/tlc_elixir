<div class="w-full p-6 bg-gray-50">
  <!-- Two-column grid section -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
    <div class="bg-white p-4 rounded shadow">
      <h2 class="text-xl font-semibold mb-4 text-gray-700">Program Definition</h2>
      <div class="font-mono text-sm overflow-x-auto bg-gray-50 p-4 rounded">
        <pre><%= format_program_as_elixir(@tlc.program) %></pre>
      </div>
    </div>

    <div class="bg-white p-4 rounded shadow">
      <h2 class="text-xl font-semibold mb-4 text-gray-700">Current State</h2>
      <table class="w-full border-collapse">
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">base_time:</th>
          <td class="py-2 px-4"><%= @tlc.base_time %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">cycle_time:</th>
          <td class="py-2 px-4"><%= @tlc.cycle_time %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">offset:</th>
          <td class="py-2 px-4"><%= @tlc.offset %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">target_offset:</th>
          <td class="py-2 px-4"><%= @tlc.target_offset %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">target_distance:</th>
          <td class="py-2 px-4"><%= @tlc.target_distance %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">waited:</th>
          <td class="py-2 px-4"><%= @tlc.waited %></td>
        </tr>
        <tr>
          <th class="text-left py-2 px-4 bg-gray-50">current states:</th>
          <td class="py-2 px-4">
            <table class="w-full border-collapse border">
              <tr class="bg-gray-100">
                <%= for group <- @tlc.program.groups do %>
                  <th class="border p-2"><%= group %></th>
                <% end %>
              </tr>
              <tr>
                <%= for i <- 0..(length(@tlc.program.groups)-1) do %>
                  <% signal = String.at(@tlc.current_states, i) %>
                  <td class={"border p-2 text-center #{cell_bg_class(signal)} font-bold"}>
                    <span class={get_signal_class(signal)}><%= signal %></span>
                  </td>
                <% end %>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </div>
  </div>

  <!-- Cycle table section -->
  <div class="bg-white p-4 rounded shadow overflow-x-auto">
    <h2 class="text-xl font-semibold mb-4 text-gray-700">Cycle Table</h2>
    
    <!-- Column-based layout -->
    <div class="flex border-t border-l border-gray-200">
      <!-- Labels column -->
      <div class="w-24 flex flex-col">
        <div class="p-2 h-12 flex items-center justify-left font-semibold bg-gray-50 border-r border-b border-gray-200"></div>
        <div class="p-2 h-12 flex items-center text-left bg-gray-50 font-medium border-r border-b border-gray-200">Offset</div>
        <div class="p-2 h-12 flex items-center text-left bg-gray-50 font-medium border-r border-b border-gray-200">Skips</div>
        <div class="p-2 h-12 flex items-center text-left bg-gray-50 font-medium border-r border-b border-gray-200">Waits</div>
        <%= for {group, i} <- Enum.with_index(@tlc.program.groups) do %>
          <div class={"p-2 h-12 flex items-center text-left bg-gray-50 font-medium border-r #{if i == length(@tlc.program.groups) - 1, do: "", else: "border-b"} border-gray-200"}>
            <%= group %>
          </div>
        <% end %>
      </div>
      
      <!-- Data columns -->
      <%= for {cycle, col_idx} <- Enum.with_index(0..(@tlc.program.length - 1)) do %>
        <div class={"flex-1 flex flex-col relative #{if col_idx == @tlc.program.length - 1, do: "border-r", else: ""} border-gray-200 #{if @tlc.cycle_time == cycle, do: "outline outline-4 outline-offset-0 outline-gray-500 z-10 rounded", else: ""}"}>
          <!-- Header cell -->
          <div class="p-2 h-12 flex items-center justify-center font-semibold border-r border-b border-gray-200">
            <%= cycle %>
          </div>
          
          <!-- Offset cell -->
          <% 
            is_between = cond do
              @tlc.target_distance > 0 -> 
                if @tlc.target_offset < @tlc.offset do
                  # Wrap around case for positive distance
                  cycle > @tlc.offset || cycle <= @tlc.target_offset
                else
                  # Normal case
                  cycle > @tlc.offset && cycle <= @tlc.target_offset
                end
              @tlc.target_distance < 0 ->
                if @tlc.target_offset > @tlc.offset do
                  # Wrap around case for negative distance
                  cycle < @tlc.offset || cycle >= @tlc.target_offset
                else
                  # Normal case
                  cycle < @tlc.offset && cycle >= @tlc.target_offset
                end
              true -> false
            end 
          %>
          <div class={"p-2 h-12 flex items-center justify-center cursor-pointer border-r border-b border-gray-200 #{cond do 
            cycle == @tlc.offset && cycle == @tlc.target_offset -> "bg-blue-300" 
            cycle == @tlc.offset -> "bg-blue-300"
            cycle == @tlc.target_offset -> "bg-gray-300"
            is_between -> "bg-gray-200"
            true -> "hover:bg-gray-100"
          end}"} 
            phx-click="set_target_offset" phx-value-target_offset={cycle}>
            <%= if cycle == @tlc.offset do %>
              <span class="font-medium text-gray-700">
                <%= if @tlc.target_distance != 0 do %>
                  <%= if @tlc.target_distance > 0, do: "+", else: "" %><%= @tlc.target_distance %>
                <% else %>
                  0
                <% end %>
              </span>
            <% else %>
              <span class="opacity-0">0</span>
            <% end %>
          </div>
          
          <!-- Skip cell -->
          <% 
            skip_duration = Map.get(@tlc.program.skips, cycle, 0)
            has_skip = skip_duration > 0
            is_start_of_skip = has_skip
            is_within_skip = Enum.any?(@tlc.program.skips, fn {start, duration} -> 
              cycle > start && cycle < start + duration
            end)
          %>
          <div class={"p-2 h-12 flex items-center justify-center border-r border-b border-gray-200 #{if is_start_of_skip || is_within_skip, do: "bg-gray-200", else: ""}"}>
            <%= if is_start_of_skip do %>
              <%= skip_duration %>
            <% else %>
              <span class="opacity-0">0</span>
            <% end %>
          </div>
          
          <!-- Wait cell -->
          <% 
            wait_duration = Map.get(@tlc.program.waits, cycle, 0)
            has_wait = wait_duration > 0
          %>
          <div class={"p-2 h-12 flex items-center justify-center border-r border-b border-gray-200 #{if has_wait, do: "bg-gray-200", else: ""}"}>
            <%= if has_wait do %>
              <%= wait_duration %>
            <% else %>
              <span class="opacity-0">0</span>
            <% end %>
          </div>
          
          <!-- Group signal cells -->
          <%= for {_, i} <- Enum.with_index(@tlc.program.groups) do %>
            <% state = TLC.resolve_state(@tlc, cycle) %>
            <% signal = String.at(state, i) %>
            <div class={"p-2 h-12 flex items-center justify-center border-r #{if i == length(@tlc.program.groups) - 1, do: "", else: "border-b"} border-gray-200 #{cell_bg_class(signal)}"}>
              <span><%= signal %></span>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>
  </div>
</div>