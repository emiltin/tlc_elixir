<div class="w-full p-6 bg-gray-50">
  <h1 class="text-3xl font-bold mb-6 text-gray-800">TLC Program Live</h1>

  <!-- Form section -->
  <div class="mb-6 bg-white p-4 rounded shadow">
    <form phx-submit="set_target_offset" class="flex items-center gap-4">
      <label class="flex items-center gap-2">
        <span class="font-medium">Target Offset:</span>
        <input name="target_offset" type="number" value={@tlc.target_offset} 
               class="border rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" />
      </label>
      <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
        Set
      </button>
    </form>
  </div>

  <!-- Two-column grid section -->
  <div class="grid grid-cols-1 2xl:grid-cols-2 gap-6 mb-8">
    <div class="bg-white p-4 rounded shadow">
      <h2 class="text-xl font-semibold mb-4 text-gray-700">Program Definition</h2>
      <div class="font-mono text-sm overflow-x-auto bg-gray-50 p-4 rounded">
        <pre><%= format_program_as_elixir(@tlc.program) %></pre>
      </div>
    </div>

    <div class="bg-white p-4 rounded shadow">
      <h2 class="text-xl font-semibold mb-4 text-gray-700">Current State</h2>
      <table class="w-full border-collapse">
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">base_time:</th>
          <td class="py-2 px-4"><%= @tlc.base_time %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">cycle_time:</th>
          <td class="py-2 px-4"><%= @tlc.cycle_time %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">offset:</th>
          <td class="py-2 px-4"><%= @tlc.offset %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">target_offset:</th>
          <td class="py-2 px-4"><%= @tlc.target_offset %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">target_distance:</th>
          <td class="py-2 px-4"><%= @tlc.target_distance %></td>
        </tr>
        <tr class="border-b">
          <th class="text-left py-2 px-4 bg-gray-50">waited:</th>
          <td class="py-2 px-4"><%= @tlc.waited %></td>
        </tr>
        <tr>
          <th class="text-left py-2 px-4 bg-gray-50">current states:</th>
          <td class="py-2 px-4">
            <table class="w-full border-collapse border">
              <tr class="bg-gray-100">
                <%= for group <- @tlc.program.groups do %>
                  <th class="border p-2"><%= group %></th>
                <% end %>
              </tr>
              <tr>
                <%= for i <- 0..(length(@tlc.program.groups)-1) do %>
                  <% signal = String.at(@tlc.current_states, i) %>
                  <td class={"border p-2 text-center #{cell_bg_class(signal)} font-bold"}>
                    <span class={get_signal_class(signal)}><%= signal %></span>
                  </td>
                <% end %>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </div>
  </div>

  <!-- Cycle table section -->
  <div class="bg-white p-4 rounded shadow overflow-x-auto">
    <h2 class="text-xl font-semibold mb-4 text-gray-700">Cycle Table</h2>
    <table class="border-collapse border min-w-full">
      <thead>
        <tr class="bg-gray-100">
          <th class="border p-2"></th>
          <%= for cycle <- 0..(@tlc.program.length - 1) do %>
            <th class={"border p-2 px-4 #{if @tlc.cycle_time == cycle, do: "bg-gray-300 font-bold border-b-2 border-b-gray-500", else: ""}"}>
              <%= cycle %>
            </th>
          <% end %>
        </tr>
      </thead>
      <tbody>
        <!-- Offset indicator row -->
        <tr>
          <th class="border p-2 px-4 bg-gray-50 text-left">Offset</th>
          <%= for cycle <- 0..(@tlc.program.length - 1) do %>
            <% 
              # Check if this cycle is between offset and target_offset
              is_between = cond do
                # If target is ahead (positive distance)
                @tlc.target_distance > 0 -> 
                  cycle > @tlc.offset && cycle <= @tlc.target_offset
                # If target is behind (negative distance)
                @tlc.target_distance < 0 -> 
                  (cycle < @tlc.offset && cycle >= @tlc.target_offset)
                # If at target (zero distance)
                true -> false
              end 
            %>
            <td class={"border p-1 text-center cursor-pointer #{cond do 
              cycle == @tlc.offset && cycle == @tlc.target_offset -> "bg-blue-300" 
              cycle == @tlc.offset -> "bg-blue-300"
              cycle == @tlc.target_offset -> "bg-gray-300"
              is_between -> "bg-gray-200"
              true -> "hover:bg-gray-100"
            end} #{if @tlc.cycle_time == cycle, do: "border-l-2 border-r-2 border-gray-400", else: ""}"} 
              phx-click="set_target_offset" phx-value-target_offset={cycle}>
              <div class="h-6 flex items-center justify-center">
                <%= if cycle == @tlc.offset do %>
                  <span class="font-medium text-gray-700">
                    <%= if @tlc.target_distance != 0 do %>
                      <%= if @tlc.target_distance > 0, do: "+", else: "" %><%= @tlc.target_distance %>
                    <% else %>
                      0
                    <% end %>
                  </span>
                <% end %>
              </div>
            </td>
          <% end %>
        </tr>
        
        <!-- Skip points row -->
        <tr>
          <th class="border p-2 px-4 bg-gray-50 text-left">Skips</th>
          <%= for i <- 0..(@tlc.program.length - 1) do %>
            <% 
              skip_duration = Map.get(@tlc.program.skips, i, 0)
              has_skip = skip_duration > 0
              
              # This cell is the start of a skip
              is_start_of_skip = has_skip
              
              # Check if this cell is within a skip span but not the start
              is_within_skip = Enum.any?(@tlc.program.skips, fn {start, duration} -> 
                i > start && i < start + duration
              end)
            %>
            <td class={"border p-1 text-center #{if @tlc.cycle_time == i, do: "border-l-2 border-r-2 border-gray-400", else: ""} #{if is_start_of_skip || is_within_skip, do: "bg-gray-200", else: ""}"}>
              <%= if is_start_of_skip do %>
                <%= skip_duration %>
              <% end %>
            </td>
          <% end %>
        </tr>
        
        <!-- Wait points row -->
        <tr>
          <th class="border p-2 px-4 bg-gray-50 text-left">Waits</th>
          <%= for i <- 0..(@tlc.program.length - 1) do %>
            <% 
              wait_duration = Map.get(@tlc.program.waits, i, 0)
              has_wait = wait_duration > 0
            %>
            <td class={"border p-1 text-center #{if @tlc.cycle_time == i, do: "border-l-2 border-r-2 border-gray-400", else: ""} #{if has_wait, do: "bg-gray-200", else: ""}"}>
              <%= if has_wait do %>
                <%= wait_duration %>
              <% end %>
            </td>
          <% end %>
        </tr>
        
        <!-- Group signals -->
        <%= for {group, i} <- Enum.with_index(@tlc.program.groups) do %>
          <tr>
            <th class="border p-2 px-4 bg-gray-50 text-left"><%= group %></th>
            <%= for cycle <- 0..(@tlc.program.length - 1) do %>
              <% state = TLC.resolve_state(@tlc, cycle) %>
              <% signal = String.at(state, i) %>
              <td class={"border p-2 text-center #{cell_bg_class(signal)} #{if @tlc.cycle_time == cycle, do: "border-l-2 border-r-2 border-gray-400", else: ""}"}>
                <!-- Removed the span containing the signal letter -->
              </td>
            <% end %>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>